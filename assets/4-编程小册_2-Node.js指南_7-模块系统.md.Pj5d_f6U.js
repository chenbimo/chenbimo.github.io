import{_ as s,c as a,o as n,U as p}from"./chunks/framework.QkLTjxkX.js";const b=JSON.parse('{"title":"模块系统","description":"","frontmatter":{"isOriginal":true,"icon":"markdown","category":"Node.js指南","tag":["模块系统"]},"headers":[],"relativePath":"4-编程小册/2-Node.js指南/7-模块系统.md","filePath":"4-编程小册/2-Node.js指南/7-模块系统.md","lastUpdated":null}'),l={name:"4-编程小册/2-Node.js指南/7-模块系统.md"},e=p(`<h1 id="模块系统" tabindex="-1">模块系统 <a class="header-anchor" href="#模块系统" aria-label="Permalink to &quot;模块系统&quot;">​</a></h1><p>JavaScript 是一个 10 天造就的语言，不可避免地很多地方会考虑不周到，遗留或多或少的语言糟粕。</p><p>比如，其他很多语言都有的模块系统，JavaScript 就没有。</p><p>前端程序员都知道，我们写一个页面，通过<code>&lt;script&gt;</code>标签的方式将各种 js 引入进来，其实他们就相当于写在同一个文件里。</p><p>也就是说，如果我们定义了一个相同的变量名和函数，后面变量和函数，会将之前引入的覆盖掉。</p><p>这就很棘手，不利于多人合作和问题排查。</p><p>那么，作为晚 JavaScript 14 年诞生的 Node.js，显然会避免这种问题的发生。</p><p>而我们的 JavaScript 14 周岁之际，也通过另外一种形式，实现了自己的模块化编程开发之道。</p><p>那么，什么是模块化呢？</p><p>我们这里暂时只需要记住这几个关键字。</p><ul><li>module</li><li>exports</li><li>require</li></ul><p>那么，示例代码如下。</p><p>a.js 文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用exports导出一个plus函数，传入2个数字，返回两数之和</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plus</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>b.js 文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用require引入a.js文件，并使用plus函数求和</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> mymath</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./a.js&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> mymath</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plus</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 结果：3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样，我们就能在任意不同的文件里面，定义相同的函数和变量，然后导入使用，而不会引起变量冲突。</p><p>那么，module 的作用是什么呢？请看代码。</p><p>c.js 文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 只导出一个函数</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>d.js 文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 引入的c.js文件就是一个函数</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> plus</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./c.js&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> plus</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 结果：3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所以，同学们，看到区别没有？当然，这是比较简单的区别，更深的原理探究，将在后续文章分享。</p><p>更多内容，请访问 <a href="https://chensuiyi.com" target="_blank" rel="noreferrer">陈随易 https://chensuiyi.com</a>。</p>`,24),o=[e];function r(t,c,i,y,B,d){return n(),a("div",null,o)}const m=s(l,[["render",r]]);export{b as __pageData,m as default};
